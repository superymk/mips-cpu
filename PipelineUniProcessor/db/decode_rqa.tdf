--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix II" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 9.0 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_compare 2009:02:03:01:43:16:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_rqa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode4217w[1..0]	: WIRE;
	w_anode4226w[3..0]	: WIRE;
	w_anode4243w[3..0]	: WIRE;
	w_anode4253w[3..0]	: WIRE;
	w_anode4263w[3..0]	: WIRE;
	w_anode4273w[3..0]	: WIRE;
	w_anode4283w[3..0]	: WIRE;
	w_anode4293w[3..0]	: WIRE;
	w_anode4303w[3..0]	: WIRE;
	w_anode4315w[1..0]	: WIRE;
	w_anode4322w[3..0]	: WIRE;
	w_anode4333w[3..0]	: WIRE;
	w_anode4343w[3..0]	: WIRE;
	w_anode4353w[3..0]	: WIRE;
	w_anode4363w[3..0]	: WIRE;
	w_anode4373w[3..0]	: WIRE;
	w_anode4383w[3..0]	: WIRE;
	w_anode4393w[3..0]	: WIRE;
	w_data4215w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode4393w[3..3], w_anode4383w[3..3], w_anode4373w[3..3], w_anode4363w[3..3], w_anode4353w[3..3], w_anode4343w[3..3], w_anode4333w[3..3], w_anode4322w[3..3]), ( w_anode4303w[3..3], w_anode4293w[3..3], w_anode4283w[3..3], w_anode4273w[3..3], w_anode4263w[3..3], w_anode4253w[3..3], w_anode4243w[3..3], w_anode4226w[3..3]));
	w_anode4217w[] = ( (w_anode4217w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode4226w[] = ( (w_anode4226w[2..2] & (! w_data4215w[2..2])), (w_anode4226w[1..1] & (! w_data4215w[1..1])), (w_anode4226w[0..0] & (! w_data4215w[0..0])), w_anode4217w[1..1]);
	w_anode4243w[] = ( (w_anode4243w[2..2] & (! w_data4215w[2..2])), (w_anode4243w[1..1] & (! w_data4215w[1..1])), (w_anode4243w[0..0] & w_data4215w[0..0]), w_anode4217w[1..1]);
	w_anode4253w[] = ( (w_anode4253w[2..2] & (! w_data4215w[2..2])), (w_anode4253w[1..1] & w_data4215w[1..1]), (w_anode4253w[0..0] & (! w_data4215w[0..0])), w_anode4217w[1..1]);
	w_anode4263w[] = ( (w_anode4263w[2..2] & (! w_data4215w[2..2])), (w_anode4263w[1..1] & w_data4215w[1..1]), (w_anode4263w[0..0] & w_data4215w[0..0]), w_anode4217w[1..1]);
	w_anode4273w[] = ( (w_anode4273w[2..2] & w_data4215w[2..2]), (w_anode4273w[1..1] & (! w_data4215w[1..1])), (w_anode4273w[0..0] & (! w_data4215w[0..0])), w_anode4217w[1..1]);
	w_anode4283w[] = ( (w_anode4283w[2..2] & w_data4215w[2..2]), (w_anode4283w[1..1] & (! w_data4215w[1..1])), (w_anode4283w[0..0] & w_data4215w[0..0]), w_anode4217w[1..1]);
	w_anode4293w[] = ( (w_anode4293w[2..2] & w_data4215w[2..2]), (w_anode4293w[1..1] & w_data4215w[1..1]), (w_anode4293w[0..0] & (! w_data4215w[0..0])), w_anode4217w[1..1]);
	w_anode4303w[] = ( (w_anode4303w[2..2] & w_data4215w[2..2]), (w_anode4303w[1..1] & w_data4215w[1..1]), (w_anode4303w[0..0] & w_data4215w[0..0]), w_anode4217w[1..1]);
	w_anode4315w[] = ( (w_anode4315w[0..0] & data_wire[3..3]), enable_wire);
	w_anode4322w[] = ( (w_anode4322w[2..2] & (! w_data4215w[2..2])), (w_anode4322w[1..1] & (! w_data4215w[1..1])), (w_anode4322w[0..0] & (! w_data4215w[0..0])), w_anode4315w[1..1]);
	w_anode4333w[] = ( (w_anode4333w[2..2] & (! w_data4215w[2..2])), (w_anode4333w[1..1] & (! w_data4215w[1..1])), (w_anode4333w[0..0] & w_data4215w[0..0]), w_anode4315w[1..1]);
	w_anode4343w[] = ( (w_anode4343w[2..2] & (! w_data4215w[2..2])), (w_anode4343w[1..1] & w_data4215w[1..1]), (w_anode4343w[0..0] & (! w_data4215w[0..0])), w_anode4315w[1..1]);
	w_anode4353w[] = ( (w_anode4353w[2..2] & (! w_data4215w[2..2])), (w_anode4353w[1..1] & w_data4215w[1..1]), (w_anode4353w[0..0] & w_data4215w[0..0]), w_anode4315w[1..1]);
	w_anode4363w[] = ( (w_anode4363w[2..2] & w_data4215w[2..2]), (w_anode4363w[1..1] & (! w_data4215w[1..1])), (w_anode4363w[0..0] & (! w_data4215w[0..0])), w_anode4315w[1..1]);
	w_anode4373w[] = ( (w_anode4373w[2..2] & w_data4215w[2..2]), (w_anode4373w[1..1] & (! w_data4215w[1..1])), (w_anode4373w[0..0] & w_data4215w[0..0]), w_anode4315w[1..1]);
	w_anode4383w[] = ( (w_anode4383w[2..2] & w_data4215w[2..2]), (w_anode4383w[1..1] & w_data4215w[1..1]), (w_anode4383w[0..0] & (! w_data4215w[0..0])), w_anode4315w[1..1]);
	w_anode4393w[] = ( (w_anode4393w[2..2] & w_data4215w[2..2]), (w_anode4393w[1..1] & w_data4215w[1..1]), (w_anode4393w[0..0] & w_data4215w[0..0]), w_anode4315w[1..1]);
	w_data4215w[2..0] = data_wire[2..0];
END;
--VALID FILE
